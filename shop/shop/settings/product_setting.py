"""
Django settings for shop project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
# Django 项目的配置文件。
# 生成环境
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# __file__表示当前Python文件的位置。这个代码片段表示获取当前文件的父目录的绝对路径。
# resolve()方法使路径绝对，解决所有的符号链接的方式，也将其规范化(例如将斜杠变为反斜杠) Windows)。
# Path(__file__).resolve()返回一个Path对象，表示当前文件的绝对路径。例如：返回：PosixPath('/home/source/Django/bookmanager/bookmanager/settings.py')
# Path(__file__).parent.parent返回当前文件的父目录。# PosixPath('/home/source/Django/bookmanager')
# parent属性是Path对象的一个属性，它返回一个Path对象，表示父目录。
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-qh&^i+&!u(4$x8f#v9^dw2a^bq_ugjvybeb9i$6rutyi0802zh"

# 安全警告:不要在生产环境中打开调试开关运行!
DEBUG = True

# 允许以哪个主机的形式访问后端
# 默认情况下，ALLOWED_HOSTS 是一个空列表，表示不允许外网任何主机访问后端。
ALLOWED_HOSTS = ['*',]



# Application definition

# Application definition
# 安装的应用程序列表。每个应用程序都是一个 Python 包，它包含一些特定功能的代码。
INSTALLED_APPS = [
    # 管理员应用
    "django.contrib.admin",
    # 认证应用
    "django.contrib.auth",
    # 将这些模型与特定的内容类型关联起来，以便可以在应用程序中使用它们。
    "django.contrib.contenttypes",
    # 启用Django的会话（session）功能
    "django.contrib.sessions",
    #一个用于处理用户会话的应用程序。
    "django.contrib.messages",
    #一个用于处理静态文件的的应用程序。
    "django.contrib.staticfiles",
]

# 中间件是位于服务器和客户端之间的一个代码模块，它可以对请求和响应进行处理。伴随触发的事件，中间件会执行一些操作。
# 在Django中，中间件通常用于处理请求和响应、拦截请求和响应等。
'''
注意：中间件的顺序很重要，因为它们按照从上到下的顺序执行。在请求视图被处理后，中间件按照从下到上的顺序执行。
可以自己编写中间件，范例在middleware.py文件中
'''
MIDDLEWARE = [
    # 用于防止跨站脚本攻击（XSS）、跨站请求伪造（CSRF）等安全问题。
    "django.middleware.security.SecurityMiddleware",
    # 用于处理请求和响应的会话。
    "django.contrib.sessions.middleware.SessionMiddleware",
    # 用于处理一些通用的请求处理，例如处理请求头、请求方法等。
    "django.middleware.common.CommonMiddleware",
    # 这是因为Django框架在处理POST请求时，会检测CSRF令牌。如果没有检测到CSRF令牌，它会返回一个403 Forbidden错误。
    # "django.middleware.csrf.CsrfViewMiddleware",
    #  认证中间件，用于处理用户认证。
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    # 消息中间件，用于处理用户消息。
    "django.contrib.messages.middleware.MessageMiddleware",
    # X-Frame-Options中间件，用于防止点击劫持。
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# ROOT_URLCONF 工程url的配置入口
# 项目的 URL 配置。Django 将使用它来查找 URL 映射。
# 可以修改，默认不修改
ROOT_URLCONF = "shop.urls"


# 告诉模板路径
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# 定义WSGI_APPLICATION变量，其值为shop.wsgi.application
WSGI_APPLICATION = "shop.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
# 配置Django中的密码验证器
AUTH_PASSWORD_VALIDATORS = [
    {
        # 这个验证器会检查用户密码是否与用户的其他属性（如用户名、邮箱等）相似。如果相似，则可能会存在安全风险，因此会拒绝保存这个密码。
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        # 检查用户密码的长度是否符合要求。Django默认要求密码长度至少为8个字符。
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        # 检查用户密码是否是常见的弱密码。
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        # 检查用户密码是否全部由数字组成。
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/
# 语言和时区设置
LANGUAGE_CODE = "zh-hans"
# 语言代码
TIME_ZONE = "Asia/Shanghai"
# 时区，当 USE_I18N 为 True 时，Django 会将国际化支持（如多语言URL和静态文件翻译）启用
USE_I18N = True
# 控制 Django 是否使用本地时间
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
# STATIC_URL访问静态文件的URL前缀
# 就是我们访问资源http://ip:port/static/后面的路径
STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
# 默认主键类型
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
