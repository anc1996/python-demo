[uwsgi]
# 需要包含于 Python 的导入路径的目录的路径——例如项目目录
chdir=/home/source/Django/shop

# 指定WSGI模块和应用对象
# 这里的 "shop.wsgi:application" 指的是 Django 项目的 WSGI 模块
# WSGI 文件位于 "shop" 目录下，里面定义了一个名为 "application" 的 WSGI 应用对象
module=shop.wsgi:application

# 可选的路径，指向你工程的虚拟环境。
# 这里指向了 Anaconda 中的一个名为 "shop" 的虚拟环境
home=/root/anaconda3/envs/shop

# 至少要包括 DJANGO_SETTINGS_MODULE。
# 这将覆盖默认的 DJANGO_SETTINGS_MODULE 环境变量
env=DJANGO_SETTINGS_MODULE=shop.settings.dev_settings

# 启用主进程模式
# 这是一个推荐设置，可以启用 uWSGI 主进程
master=true
# 这个缓冲区用于存储来自客户端（通常是通过 Nginx 转发）的 HTTP 请求。如果请求的大小超过这个缓冲区，uWSGI 将会返回一个 502 错误响应。
buffer-size = 32768
# 指定 pid 文件路径
# uWSGI 将在这个文件中写入主进程的进程 ID
pidfile=uwsgi.pid

# 后台运行 uWSGI，并将日志输出到指定文件
daemonize=logs/uwsgi.log

# 指定监听的 socket 地址和端口
# 这里的配置表示 uWSGI 将监听 127.0.0.1 的 8051 端口
# socket=127.0.0.1:8051
socket=/home/source/Django/shop/shop.sock
# 启动的工作进程数
# 这里配置 uWSGI 启动 5 个工作进程来处理请求
processes=5

# 设置请求处理的最长时间（秒）
# 如果一个请求超过这个时间还没有处理完，uWSGI 将终止处理这个请求的工作进程
harakiri=20

# 设置单个工作进程处理的最大请求数
# 当一个工作进程处理了 5000 个请求后，它将会被重启
max-requests=5000

# 启用 vacuum 选项
# 当 uWSGI 服务停止时，将自动清理（删除） Unix socket 文件和 pid 文件
vacuum=true

