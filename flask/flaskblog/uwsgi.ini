[uwsgi]
# 项目名称
project = Flaskblog

# 项目目录
base = /home/source/flask/flaskblog
# 工作目录
chdir = %(base)

# Python 虚拟环境路径
home = /root/anaconda3/envs/flaskProject1

# 适用于flask项目部署,用于指定包含 WSGI 应用程序的 Python 文件。WSGI（Web Server Gateway Interface）是 Python 应用程序与 Web 服务器之间的标准接口
wsgi-file = app.py

# 用于指定 WSGI 应用程序的入口点。在 Flask 应用程序中，通常会有一个 app 对象，它是 Flask 应用程序实例。
callable = app

# HTTP 端口
#http = 0.0.0.0:8061
# socket端口
socket = %(base)/flaskblog.sock


# 环境变量
env = FLASK_APP=app.py
env = FLASK_ENV=development

# 进程和线程配置
processes = 4
threads = 10

# uWSGI 会创建一个主进程来管理所有的工作进程和线程。主进程负责监控工作进程的状态，并在需要时重新启动它们，从而提高系统的稳定性和可靠性。
master = true

# 设置请求处理的最长时间（秒）
# 如果一个请求超过这个时间还没有处理完，uWSGI 将终止处理这个请求的工作进程
harakiri=20


# 启用多线程
enable-threads = true


# 日志文件
daemonize = %(base)/log/uwsgi.log


# 启用调试模式，uWSGI 会在检测到 Python 代码发生变化时自动重新加载应用程序，
py-autoreload = 1


# 启用线程安全，uWSGI 会在每个工作进程启动时才加载应用程序，而不是在主进程启动时就加载。
lazy-apps = true

# PID 文件
pidfile = %(base)/uwsgi.pid

# 自动移除进程文件，确保在 uWSGI 停止时清理相关文件。
vacuum = true

# 这个缓冲区用于存储来自客户端（通常是通过 Nginx 转发）的 HTTP 请求。如果请求的大小超过这个缓冲区，uWSGI 将会返回一个 502 错误响应。
buffer-size = 32768

