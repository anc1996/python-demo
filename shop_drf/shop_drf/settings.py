"""
Django settings for shop_drf project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# 项目的根目录
BASE_DIR = Path(__file__).resolve().parent.parent
# __file__表示当前Python文件的位置。这个代码片段表示获取当前文件的父目录的绝对路径。
# resolve()方法使路径绝对，解决所有的符号链接的方式，也将其规范化(例如将斜杠变为反斜杠) Windows)。
# Path(__file__).resolve()返回一个Path对象，表示当前文件的绝对路径。例如：返回：PosixPath('/home/source/Django/bookmanager/bookmanager/settings.py')
# Path(__file__).parent.parent返回当前文件的父目录。# PosixPath('/home/source/Django/bookmanager')
# parent属性是Path对象的一个属性，它返回一个Path对象，表示父目录。
print('BASE_DIR路径:',os.path.join(BASE_DIR,'templates'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-df%3ds4-2$tudlwc^r3_)r6s$9nhv$by**_qb62vgy2^*fj#w!"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# 允许所有来源的跨域请求。
CORS_ORIGIN_ALLOW_ALL = True

# Application definition
# 安装的应用程序列表。每个应用程序都是一个 Python 包，它包含一些特定功能的代码。
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "corsheaders" , # 跨域请求
    "rest_framework",# django rest framework
    'django_filters',# 过滤器
    'drf_yasg',# drf-yasg(Swagger升级版)

    "book.apps.BookConfig", # 前后端django模板渲染
    "books.apps.BooksConfig", # drf 返回json图书增删改成
]

# 中间件是位于服务器和客户端之间的一个代码模块，它可以对请求和响应进行处理。伴随触发的事件，中间件会执行一些操作。
# 在Django中，中间件通常用于处理请求和响应、拦截请求和响应等。
'''
注意：中间件的顺序很重要，因为它们按照从上到下的顺序执行。在请求视图被处理后，中间件按照从下到上的顺序执行。
可以自己编写中间件，范例在middleware.py文件中
'''
MIDDLEWARE = [
    # 用于防止跨站脚本攻击（XSS）、跨站请求伪造（CSRF）等安全问题。
    "django.middleware.security.SecurityMiddleware",
    # 用于处理请求和响应的会话。
    "django.contrib.sessions.middleware.SessionMiddleware",
    # 要做CommonMiddleware之前，处理跨域资源共享（CORS）的Web应用程序中间件。
     "corsheaders.middleware.CorsMiddleware",
    # 用于处理一些通用的请求处理，例如处理请求头、请求方法等。
    "django.middleware.common.CommonMiddleware",
    # 这是因为Django框架在处理POST请求时，会检测CSRF令牌。如果没有检测到CSRF令牌，它会返回一个403 Forbidden错误。
    # "django.middleware.csrf.CsrfViewMiddleware",
    #  认证中间件，用于处理用户认证。
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    # 消息中间件，用于处理用户消息。
    "django.contrib.messages.middleware.MessageMiddleware",
    # X-Frame-Options中间件，用于防止点击劫持。
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# ROOT_URLCONF 工程url的配置入口
# 项目的 URL 配置。Django 将使用它来查找 URL 映射。
# 可以修改，默认不修改
ROOT_URLCONF = "shop_drf.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # 模板路径
        "DIRS": [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            # 在模板渲染之前，向模板上下文中添加额外的变量或者修改原有的变量。
            "context_processors": [
                # 用于在模板中添加debug对象。
                "django.template.context_processors.debug",
                # 用于在模板中添加request对象。
                "django.template.context_processors.request",
                # 用于在模板中添加auth对象。
                "django.contrib.auth.context_processors.auth",
                # 用于在模板中添加messages对象。
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# WSGI_APPLICATION 是一个 WSGI 兼容的 Web 服务器的入口点，它是一个 Python 字符串，指向您的项目的 WSGI 应用程序。
WSGI_APPLICATION = "shop_drf.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {  # 写
        'ENGINE': 'django.db.backends.mysql',
        'HOST': '192.168.20.2',  # 主机
        'PORT': '3306',  # 端口号
        'USER': 'books',  # 用户名
        'PASSWORD': '123456',  # 密码
        'NAME': 'books',  # 指定数据库
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

# 配置Django中的密码验证器
AUTH_PASSWORD_VALIDATORS = [
    {
        # 这个验证器会检查用户密码是否与用户的其他属性（如用户名、邮箱等）相似。如果相似，则可能会存在安全风险，因此会拒绝保存这个密码。
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        # 检查用户密码的长度是否符合要求。Django默认要求密码长度至少为8个字符。
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        # 检查用户密码是否是常见的弱密码。
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        # 检查用户密码是否全部由数字组成。
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/
# 语言和时区设置
LANGUAGE_CODE = "zh-hans"
# 语言代码
TIME_ZONE = "Asia/Shanghai"
# 时区，当 USE_I18N 为 True 时，Django 会将国际化支持（如多语言URL和静态文件翻译）启用
USE_I18N = True
# 控制 Django 是否使用本地时间
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
# STATIC_URL访问静态文件的URL前缀
# 就是我们访问资源http://ip:port/static/后面的路径
STATIC_URL = "static/"

STATICFILES_DIRS = [
    # 方法一
    # os.path.join(BASE_DIR, 'static'),
    # 方法二
    BASE_DIR / 'static'
]


# 配置工程日志
LOGGING = {
    "version": 1, #
    "disable_existing_loggers": False, # 不禁用已经存在的日志记录器
    "formatters": {
        "verbose": {
            # 它描述了每个日志行要输出的细节。
            # {levelname}：日志级别，例如 DEBUG、INFO、WARNING、ERROR 和 CRITICAL。
            # {asctime}：日志时间，格式为 YYYY-MM-DD HH:MM:SS,fff，其中 fff 是毫秒。
            # {module}：模块名，即日志消息所在的模块。
            # {lineno}：行号，即日志消息所在的行号。
            # {process:d}：进程号，整数类型。
            # {thread:d}：线程号，整数类型。
            # {message}：日志消息，即日志记录的内容。
            "format": "日志级别:{levelname},日志时间:{asctime},模块名:{module},lineno:{lineno}-进程号:{process:d}-线程号:{thread:d},日志消息:{message}",
            # 样式
            "style": "{",
        },
        # simple，输出日志级别名称（如 DEBUG）和日志信息。
        "simple": {
            "format": "日志级别:{levelname},日志时间:{asctime},模块名:{module},lineno:{lineno},日志消息:{message}",
            "style": "{",
        },
    },
    "filters": {  # 对日志进行过滤
        # Debug模式为True时，才会记录日志。
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": { # 日志处理方法
        "console": { # 向终端中输出日志
            "level": "INFO", # 有多种处理方式等级，如DEBUG、INFO、WARNING、ERROR、CRITICAL
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        'file': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/shop_drf.log'),   # 日志文件的位置，
            'maxBytes': 300 * 1024 * 1024, # 日志文件的最大大小,这里设置为300M
            # 保留的日志文件的个数，若满的话新建一个文件
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    "loggers": {  # 日志器
        "books": {# django的日志器
            "handlers": ['console', 'file'], # 处理方法
            "propagate": True,# 是否传递给父日志器
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
        # 定义了一个名为verifications的日志器,监控子应用verifications
        'book_drf': {
            'handlers': ['console', 'file'],
            'propagate': True,
            'level': 'DEBUG',
        },
        'BasicAPIView': {
            'handlers': ['console', 'file'],
            'propagate': True,
            'level': 'DEBUG',
        },
        'GenericAPI_Mixin': {
            'handlers': ['console', 'file'],
            'propagate': True,
            'level': 'DEBUG',
        },
        'BasicViewSet': {
            'handlers': ['console', 'file'],
            'propagate': True,
            'level': 'DEBUG',
        },
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
# 默认主键类型
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# 这里是全局配置，如果需要局部配置，可以在视图中配置
REST_FRAMEWORK = {
    '''
    如果认证成功 BasicAuthentication 提供以下信息。
        request.user 将是一个 Django User 实例。
        request.auth 将是 None。
    如果成功验证，SessionAuthentication 提供以下凭据。
        request.user 是一个 Django User 实例。
        request.auth 是 None。
    '''
    # 这里需要创建用户才能体现
    # 认证
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 基本认证，此身份验证方案使用 HTTP 基本身份验证，根据用户的用户名和密码进行签名。基本身份验证通常仅适用于测试。
        'rest_framework.authentication.BasicAuthentication',
        # 会话认证，此认证方案使用Django的默认session后端进行身份验证。Session身份验证适用于与你的网站在相同的Session环境中运行的AJAX客户端。
        'rest_framework.authentication.SessionAuthentication',
    ],

    # 权限，可以使用该 DEFAULT_PERMISSION_CLASSES 设置全局设置默认权限策略
    'DEFAULT_PERMISSION_CLASSES': [
        #  第1种权限：API 仅供注册用户访问，则此权限适用。
        # 'rest_framework.permissions.IsAuthenticated',
        # 第2种权限：如果未指定，则此设置默认为允许不受限制的访问：
        # 'rest_framework.permissions.AllowAny',
        # 第3种：IsAdminUser 权限类将仅供一部分受信任的管理员访问和 user.is_staff True 在这种情况下将允许权限。
        'rest_framework.permissions.IsAdminUser',
        # 第4种：IsAuthenticatedOrReadOnly 权限类将允许已经通过身份验证的用户进行任何请求，而未经身份验证的用户只能进行 GET、HEAD 或 OPTIONS 请求。
        # 'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],

    # 全局限流,用于控制客户端可以向 API 发出的请求速率。
    'DEFAULT_THROTTLE_CLASSES': [
        # 只会 AnonRateThrottle 限制未经身份验证的用户。传入请求的 IP 地址用于生成要限制的唯一密钥。
        'rest_framework.throttling.AnonRateThrottle',
        # 只会 UserRateThrottle 限制经过身份验证的用户。传入请求的用户 ID 用于生成要限制的唯一密钥。
        # 注意：未经身份验证的请求将回退到使用传入请求的 IP 地址来生成要限制的唯一密钥。
        'rest_framework.throttling.UserRateThrottle',
        # 限制用户对于每个视图的访问频次，使用ip或user id。例如：对multifunction.otherfeatures.bookview局部限流。
        'rest_framework.throttling.ScopedRateThrottle',
    ],
    # 限流速率
    'DEFAULT_THROTTLE_RATES': {
        # 未经身份验证的用户每天可以进行 100 次请求。
        'anon': '100/day',
        # 经过身份验证的用户每天可以进行 1000 次请求。
        'user': '1000/day',
        # 局部视图限流,例如：对multifunction.otherfeatures.bookview局部限流。
        'bookview': '5/day',
        'bookorder':'8/day',
    },

    # 全局过滤
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],

    # 全局分页器，用的不多
    # 第1种：此分页样式接受请求查询参数中的单个数字页码。列如：/***/?page=4
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 第2种：此分页样式反映了查找多个数据库记录时使用的语法。客户端包括“limit”和“offset”查询参数。该限制表示要返回的最大项目数，与其他样式中的限制相同 page_size 。偏移量表示要跳过的项目数。
    # 例如：?limit=100&offset=400
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100,

    # 异常，默认为 REST 框架提供的标准异常处理程序：
    # 'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
    # 自定义异常
    'EXCEPTION_HANDLER': 'book_drf.CustomExceptions.utils.custom_exception_handler',

    # 指定用于支持coreapi的Schema
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
}

